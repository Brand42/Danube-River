import React, {Component, createRef} from "react";
import PropTypes from "prop-types";
import {map} from "../../../core/utils";
import Popup from "./Popup";
import HotSpot from "./HotSpot";
import {MapContext} from "../../../context/MapContext";
import config from "../../../core/config";
import {Waypoint} from "react-waypoint";

const MAP = {
  width: 1440,
  height: 900,
};

@MapContext
export default class MapZoomed extends Component {
  static propTypes = {
    onHotSpotClick: PropTypes.func,
  };

  #map = createRef();

  state = {
    hotSpots: [
      {active: false, x: 269, y: 214, tag: config.articles[0].title, title: config.articles[0].intro},
      {active: false, x: 499, y: 267, tag: config.articles[1].title, title: config.articles[1].intro},
      {active: false, x: 909, y: 620, tag: config.articles[2].title, title: config.articles[2].intro},
      {active: false, x: 1240, y: 591, tag: config.articles[3].title, title: config.articles[3].intro},
      {active: false, x: 1320, y: 561, tag: config.articles[4].title, title: config.articles[4].intro},
    ],
    popupPosition: {x: 0, y: 0},
    focused: false,
  };

  componentDidMount() {
    this.#setPopupPosition();
    window.addEventListener('resize', this.#setPopupPosition);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.#setPopupPosition);
  }

  #setPopupPosition = () => {
    const activeHotSpot = this.#getActiveHotSpot();
    if (!activeHotSpot) {
      return;
    }
    const rect = this.#map.current.getBoundingClientRect();
    const popupPosition = {
      x: map(activeHotSpot.x, 0, MAP.width, 0, rect.width) + rect.left,
      y: map(activeHotSpot.y, 0, MAP.height, 0, rect.height) + rect.top,
    };
    this.setState({popupPosition});
  };

  #toggleHotSpot = (index, active = false) => async () => {
    const hotSpots = this.state.hotSpots.map((hotSpot, hotSpotIndex) => {
      if (hotSpotIndex === index) {
        hotSpot.active = active;
      } else {
        hotSpot.active = false;
      }
      return hotSpot;
    });
    await this.setState({hotSpots});
    this.#setPopupPosition();
  };

  #getActiveHotSpotIndex = () => {
    return this.state.hotSpots.findIndex(hotSpot => hotSpot.active);
  };

  #getActiveHotSpot = () => {
    const activeHotSpotIndex = this.#getActiveHotSpotIndex();
    return activeHotSpotIndex === -1 ? null : this.state.hotSpots[activeHotSpotIndex];
  };

  #handleClick = index => () => {
    if (this.props.onHotSpotClick) {
      this.props.onHotSpotClick(index);
    }
  };

  #toggleFocused = focused => () => this.setState({focused});

  render() {
    const activeHotSpot = this.#getActiveHotSpot();

    return (
      <div className={`MapZoomed ${this.state.focused ? 'MapZoomed--focused' : ''}`}>
        <div className="MapZoomed__info type-h4">
          {config.mapInfo}
        </div>

        <svg viewBox={`0 0 ${MAP.width} ${MAP.height}`} style={{width: '100%'}} ref={this.#map}>
          <g fill="none" fillRule="evenodd">
            <path
              className="MapZoomed__river"
              d="M68.753 320.824l6.367-3.733 6.31 1.929 3.834-1.514 2.677 2.468 8.364-.934 8.972-15.223 10.376.497 2.3-3.526 11.895-4.812 3.083-5.081h.166l4.587-4.5 20.925-5.767.881-8.47 14.39-7.728 10.232-7.316c11.17-.858 18.545-1.57 22.126-2.138 5.365-.85 7.903.869 10.564.411 8.63-1.484 13.826-2.662 16.303-3.288 4.77-1.206 7.764-2.548 8.984-4.028l2.246-6.905 3.743-1.727c1.568-.442 2.705-.634 3.41-.575 1.768.148 3.335 1.165 4.16.575a44.243 44.243 0 013.826-2.466v-1.562l-1.664-1.644c2.732-.403 3.758-1.225 3.078-2.466-.68-1.242-1.152-2.448-1.414-3.617l7.486.328c3.69-.443 6.435-.361 8.235.247 1.8.608 4.209 2.267 7.226 4.976l1.757-1.359 4.991 2.138c-.13 1.384.34 2.288 1.414 2.712 1.437.568 1.093 3.143 2.08 3.453 2.093.657 2.924.657 2.495 0 .978.029 1.726.029 2.246 0 .52-.028 1.324-.357 2.412-.986l2.246.246 4.16 2.795c.318.572.54 1.065.665 1.48.25.832.306 2.224.831 2.548 1.379.851 2.141 1.09 3.078.905.625-.124 1.21-.744 1.756-1.862l4.15.135c1.497.822 2.44 1.398 2.828 1.727.388.329.661.856.82 1.582.875.788 1.49 1.44 1.842 1.953.353.513.713 1.28 1.081 2.301.991 1.17 1.407 1.964 1.248 2.384-.386 1.018-1.536.965-1.58 1.316-.115.897.849.592.915.822.237.83 1.713-1.312 1.913-.822.361.886.638 1.16.831.822.61-.329 1.11-.192 1.498.41.388.604.499.905.332.905-.412.568-.634 1.034-.665 1.398-.031.364.08.555.333.575.72-.274 1.137-.356 1.247-.247.167.165-.047 1.742.333 1.973.707.43 1.428.594 2.163.494l1.83 1.89c2.468 1.835 4.132 2.904 4.99 3.207.72.253 1.306-.646 1.75-.498.77.256 1.463.477 2.077.662 2.09.63 3.56.931 4.409.904.831 1.26 1.913 1.918 3.244 1.973 1.33.055 2.273.028 2.828-.082 2.778.328 4.289.298 4.531-.089.31-.494-.613-.246-.124.073.593.388.984.559 1.172.512.482-.12.64-.966.92-.901.71.176 1.64 1.295 1.967 1.376.92.228 1.462.369 1.627.423.501.163.364 1.244.836 1.468 1.319.628 1.514.966 2.424 1.387 1.995.925 2.553 1.142 1.671.653a6.91 6.91 0 001.254 2.121c.836.98 1.505 1.387 2.006 2.04.502.653 1.348.221 1.588.49.649.726.948.757 1.254 1.06.718.712.734.865 1.421 1.55 1.3 1.298 2.347 1.53 1.839.409-.071-.158-.61-.286-1.087-.735-.086-.08-.141-.271-.167-.57.093-.273.26-.409.502-.409.241 0 .575.163 1.003.49.454.05.788.023 1.003-.082.214-.104.493-.376.836-.816.348-.05.599.087.752.408.153.322.208.702.167 1.142l.445.85c-.19.466-.199.863-.027 1.19.172.327.478.763.92 1.306.335.042.585-.04.752-.245.166-.206.222-.56.167-1.06.52.034.91.034 1.17 0 .26-.035.455-.226.585-.572l1.17.898c.745 1.157 1.275 2.082 1.588 2.774.314.692.426 1.181.335 1.468-.501 1.45-.668 2.43-.502 2.938.167.508.78.889 1.84 1.142 2.77.677 4.608 1.058 5.516 1.142.907.085 1.938-.46 3.093-1.632l11.766.988 2.806 4.306 14.232 4.47 5.626 5.244 10.298-2.143 3.24-3.857 14.014 5.49 1.504-3.449 11.643-1.429 5.887-5.367.52-6.326 5.829-4.755 1.895 2.245 6.089-1.755 7.448 2.877 6.393-.796 6.19 3.633 21.883-1.061 8.186 11.632 10.703 7.918 14 1.53 9.808-4.218v1.219l3.714 2.805 6.872.437 1.799 6.327 5.615 5.43v2h4.091c2.382 2.268 3.968 3.954 4.76 5.057 1.44 2.01 1.988 4.436 2.838 5.472.974 1.186 3.096.712 4.843 2.238.691.604 1.61 2.179 2.756 4.725l2.505-.58c2.843 2.896 5.097 4.858 6.763 5.886 1.666 1.027 3.82 1.785 6.46 2.272l16.524-1.616 14.507 2.162 10.187-2.818 14.185.488 4.602-5.628 10.855.498 2.742 4.626 5.936-5.12 6.446 3.861-.336 12.193-4.71 12.675 1.487 4.092-2.07 6.274-4.988 2.75-5.265 18.865 1.575 8.037 4.507 4.45-2.844 18.865 5.425 11.038-9.61 8.835 4.039 11.773-2.362 7.66 2.435 7.955.219 11.036-5.323 1.93-10.354 14.124 8.473 9.926h3.827l-1.78 2.367 1.78 2.367-3.155 1.96-.97 4.08h2.346l3.155-1.142v3.183l-4.53.898 3.154 2.612 3.884-2.612 1.375 3.592-5.219 1.52 3.825 4.19-4.017 4.5-.688 4.578 4.03 2.877 3.715-2.156 5.035 4.21-1.197 2.114-4.815-.616-.701 4.068 2.476 3.492-3.44 3.266 16.62 11.664 10.992.988v.912l8.632-3.905 2.65 3.911 14.664-.862 3.387-4.056 7.57 7.82 13.695-.04 10.162 12.237.087 3.407-3.793 1.577-.55 3.68 5.096 7.802 5.037 3.238L863 640l-6.624-19.665 3.84 4.289 11.434 1.514L870 635.5l8.065-.559 19.383 2.887 5.55 10.766 3.805 4.268 2.93-1.114 7.727-15.308 9.54-6.202c4.01 4.262 7.313 7.384 9.908 9.365 1.558 1.19 3.353-1.068 5.319 0 .872.474 2.424 1.945 4.654 4.412.521 1.536.521 2.563 0 3.08-.521.517-2.067 1.024-4.636 1.52l-4.257-3.101-3.574 1.581-.914 4.662h-4.654c-.664 1.72-.941 2.912-.831 3.58.11.667 1.163 1.332 3.158 1.997v6.91l4.571 4.578 5.569.916v5.66c0 2.105-2.93-3.393-.937-2.714 1.992.679 3.518 1.352 4.578 2.02 1.398.882 2.257 2.449 4.162 3.539 1.793 1.025 4.29 2.654 7.491 4.886l6.243 1.01 1.665 2.865-2.497 4.044-7.658 1.938a289.385 289.385 0 00-1.915 5.728 204.42 204.42 0 00-1.53 5.133l2.945 3.46 10.655 3.37 13.734-4.718 9.656-.505c2.97.78 4.94 1.398 5.91 1.853 1.714.806 2.24 2.041 3.33 2.443 2.013.743 3.844.743 5.494 0h5.577c.47.692 1.135 1.253 1.997 1.685 1.023.513 2.364.094 3.247 1.011 1.6 1.665 5.92 1.603 11.154 3.202 1.452.443 2.795 1.45 5.244 2.527 1.13.497 3.266 1.311 6.41 2.443l10.071-1.685c2.645-2.134 4.476-3.51 5.494-4.128 1.018-.618 2.96-1.151 5.827-1.6 2.114.643 3.723 1.176 4.828 1.6 1.633.627 3.203.898 3.995 1.432 1.595 1.076 4.092 2.508 7.492 4.297 1.119-1.428 2.478-2.215 4.078-2.36 1.132-.101 2.082-.709 5.017.031.81.205 2.024-.451 3.64-1.968 1.219-.341 2.412-.004 3.58 1.011 1.167 1.015 2.693 2.11 4.578 3.286l5.743-1.18c2.775 1.741 4.606 3.258 5.494 4.55.888 1.291 2.358 2.218 4.412 2.78a12.896 12.896 0 005.327-1.685c1.665-.955 3.524-1.152 5.577-.59 2.941-1.573 5.494-3.033 7.658-4.38.66-.411 1.861.685 4.495-.253.979-.35 2.172-1.332 3.58-2.95 1.523-1.449 2.716-2.432 3.578-2.948 1.171-.7 2.618-3.303 3.247-4.128 2.018-2.645 3.63-4.779 5.077-6.402 1.694-1.901 1.94-.21 4.246-2.275.752-.674 2.068-4.61 4.411-6.487.653-.522 2.29-.803 4.911-.842 2.145-.956 3.977-1.77 5.494-2.443 1.418-.629 4.029-2.523 5.91-2.949.845-.191 2.45.67 4.162.758 1.462.076 5.356-1.629 6.326-1.769 1.57-.226 1.72.41 4.079.337.975-.03 2.964-1.117 4.578-1.348.62-.089 1.224-1.09 2.33-1.18.798-.064 1.714.02 2.748.254 1.789-.647 3.093-1.18 3.912-1.601 2.293-1.178 4.284-2.598 5.494-3.033 1.859-.667 3.995-.892 6.41-.674 1.292-.638 2.347-.975 3.162-1.01.901-.04.914.911 1.998 1.01.09.008 1.332-.337 3.58-.674 2.247-.337-.827 1.768 5.743 2.106.884.046 2.315-.924 3.912-1.095.611-.065 1.583.103 2.914.506 1.33.402-.72-1.915.624-1.562l3.205.84 15.534-7.106 4.143-5.151 9.039-2.839 2.337-5.277 4.115-2.965.288-4.689-2.712-2.103 2.12-12.132-4.33-6.118.75-2.923.592-2.607 1.184-1.114.463-3.238 3.522-2.545-2.614-4.772 1.3-3.217-1.588-13.667 2.728-7.212v-.169l2.483-1.682-2.093-6.896 1.834-4.142 3.002-11.775 4.173-2.397 5.356 2.523 1.14-5.004 4.389 2.019 4.432 11.585 22.94 8.999 5.327-1.64-2.584-3.595 3.364-2.208-1.386-2.355 10.408 4.5 1.127-4.584 9.022-4.1 6.497.105 4.72-4.92 4.563-.841 8.17 1.43 3.827 1.03 7.03 6.75 1.545 6.244"
              stroke="#00C9FF"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={4}
            />

            {this.state.hotSpots.map((hotSpot, index) => (
              <HotSpot
                key={`hot.spot.${index}`}
                index={index}
                x={hotSpot.x}
                y={hotSpot.y}
                onPointerEnter={this.#toggleHotSpot(index, true)}
                onPointerLeave={this.#toggleHotSpot(index, false)}
                onClick={this.#handleClick(index)}
              />
            ))}
          </g>
        </svg>

        {activeHotSpot && (
          <Popup
            tag={activeHotSpot.tag}
            title={activeHotSpot.title}
            x={this.state.popupPosition.x}
            y={this.state.popupPosition.y}
          />
        )}

        <Waypoint onEnter={this.#toggleFocused(true)} onLeave={this.#toggleFocused(false)}/>
      </div>
    );
  }
}
